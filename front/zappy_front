#!/usr/bin/env python3

from enum import Enum

from client import Client
from commands import command_msz, command_tna, command_ppo, command_pin
from draw import *
from network_utils import connect_client, recv, send

import pygame

import argparse
import socket
import re

def parse_options():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-p", "--port", type=int, action="store", dest="port", required=True, help="port is the port number")
    parser.add_argument("-h", "--machine", type=str, action="store", dest="machine", help="machine is the name of the machine; localhost by default", default="localhost")
    return parser.parse_args()

def handle_event(event_list):
    for event in event_list:
        if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
            exit(0)

def add_client(clients, argc, argv):
    if argc == 7:
        clients.append(Client(argv))

def remove_client(clients, argc, argv):
    if argc == 2:
        for i in range(len(clients)):
            if clients[i].id == int(argv[1]):
                del clients[i]
                return

def update_client(clients, sockfd):
    for client in clients:
        client.request_position(sockfd)
        client.request_inventory(sockfd)

def update_clients_position(clients, argc, argv):
    if argc != 5:
        return
    ppo = command_ppo(argv)
    if ppo is None:
        return
    for client in clients:
        if ppo[0] == client.id:
            client.update_position(ppo[1], ppo[2], ppo[3])

def update_clients_inventory(clients, argc, argv):
    if argc != 9:
        return
    pin = command_pin(argv)
    if pin is None:
        return
    for client in clients:
        if pin[0] == client.id:
            client.update_inventory(pin[1], (pin[2], pin[3], pin[4], pin[5], pin[6], pin[7]))

def loop():
    update_client(clients, sockfd)
    buf = recv(sockfd)
    if buf is None:
        return
    argvs = buf.split('\n')
    for argv in argvs:
        if argv == '':
            continue
        argv = argv.split(' ')
        argc = len(argv)
        print('mdr', argc, argv)
        if argv[0] == 'pnw':
            add_client(clients, argc, argv)
        if argv[0] == 'pdi':
            remove_client(clients, argc, argv)
        if argv[0] == 'ppo':
            update_clients_position(clients, argc, argv)
        if argv[0] == 'pin':
            update_clients_inventory(clients, argc, argv)

args = parse_options()
sockfd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect_client(sockfd, args)
width, height = command_msz(sockfd)
teams_name = command_tna(sockfd)

pygame.init()
window = pygame.display.set_mode((1920, 1080), pygame.RESIZABLE)
font = pygame.font.SysFont("arial", 16)
clients = []

while True:
    pygame.Surface.fill(window, 0)
    handle_event(pygame.event.get())
    draw_map(window, width, height)
    loop()
    draw_interface(window, font, teams_name, width, height)
    draw_client_interface(window, font, clients)
    draw_client(window, width, height, clients)
    pygame.display.flip()
