#!/usr/bin/env python3

from enum import Enum

from commands import command_msz, command_tna
from network_utils import connect_client, recv, send

import pygame

import argparse
import socket
import re

def parse_options():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-p", "--port", type=int, action="store", dest="port", required=True, help="port is the port number")
    parser.add_argument("-h", "--machine", type=str, action="store", dest="machine", help="machine is the name of the machine; localhost by default", default="localhost")
    return parser.parse_args()

def draw_text(text, x, y):
    label = myfont.render(text, 1, (255,255,0))
    window.blit(label, (x, y))

def draw_interface():
    pygame.draw.line(window, 0xFFFFFF, (400, 0), (400, 1080))
    draw_text(f"Width:  {width}", 100, 50)
    draw_text(f"Height: {height}", 100, 150)
    draw_text(f" Team Names:", 100, 250)
    i = 250
    for team in teams_name:
        draw_text(team, 280, i)
        i += 30
    pygame.draw.line(window, 0xFFFFFF, (1520, 0), (1520, 1080))
    draw_text("Clients:", 1600, 50)
    draw_client_interface()

def draw_client_interface():
    i = 250
    for client in clients:
        id = client["id"]
        x = client["x"]
        y = client["y"]
        direction = client["direction"]
        level = client["level"]
        team_name = client["team_name"]
        draw_text(f"#{id} {x} {y} {direction} {level} {team_name}", 1700, i)
        i += 50

def draw_map():
    TILE_SIZE = (1080 - 20 - 20 - 100) / height
    for i in range(width):
        for j in range(height):
            x = i * TILE_SIZE + 1920 / 2 - width / 2 * TILE_SIZE
            y = j * TILE_SIZE + 1080 / 2 - height / 2 * TILE_SIZE
            pygame.draw.rect(window, 0x808080, pygame.Rect(x, y, TILE_SIZE, TILE_SIZE), 4)

def add_client(clients, input):
    id = re.search(r"^#([1-9]+\d*)$", input[1]).groups()
    clients.append({
        "id": int(id[0]),
        "x": int(input[2]),
        "y": int(input[3]),
        "direction": int(input[4]),
        "level": int(input[5]),
        "team_name": input[6]
    })

def remove_client(clients, input):
    id = int(input[1])
    for i in range(len(clients)):
        if clients[i]["id"] == id:
            del clients[i]

def loop():
    tmp = recv(sockfd)
    if tmp is None:
        return
    if tmp[-1] == '\n':
        tmp = tmp[:-1]
    input = tmp.split(' ')
    print('mdr', input)
    if input[0] == 'pnw' and len(input) == 7:
        add_client(clients, input)
    if input[0] == 'pdi' and len(input) == 2:
        remove_client(clients, input)

def handle_event(event_list):
    for event in event_list:
        if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
            exit(0)

args = parse_options()
sockfd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect_client(sockfd, args)
width, height = command_msz(sockfd)
teams_name = command_tna(sockfd)

pygame.init()
window = pygame.display.set_mode((1920, 1080), pygame.RESIZABLE)
myfont = pygame.font.SysFont("arial", 16)
clients = []

while True:
    pygame.Surface.fill(window, 0x000000)
    handle_event(pygame.event.get())
    draw_map()
    loop()
    draw_interface()
    pygame.display.flip()
