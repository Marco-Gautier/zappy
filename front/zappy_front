#!/usr/bin/env python3

from enum import Enum

from client import Client
from commands import command_msz, command_tna
from draw import draw_text, draw_client_interface, draw_interface, draw_map
from network_utils import connect_client, recv, send

import pygame

import argparse
import socket
import re

def parse_options():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-p", "--port", type=int, action="store", dest="port", required=True, help="port is the port number")
    parser.add_argument("-h", "--machine", type=str, action="store", dest="machine", help="machine is the name of the machine; localhost by default", default="localhost")
    return parser.parse_args()

def add_client(clients, input):
    clients.append(Client(input))

def remove_client(clients, input):
    for i in range(len(clients)):
        if clients[i].id == int(input[1]):
            del clients[i]
            return

def loop():
    tmp = recv(sockfd)
    if tmp is None:
        return
    if tmp[-1] == '\n':
        tmp = tmp[:-1]
    input = tmp.split(' ')
    print('mdr', input)
    if input[0] == 'pnw' and len(input) == 7:
        add_client(clients, input)
    if input[0] == 'pdi' and len(input) == 2:
        remove_client(clients, input)

def handle_event(event_list):
    for event in event_list:
        if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
            exit(0)

args = parse_options()
sockfd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect_client(sockfd, args)
width, height = command_msz(sockfd)
teams_name = command_tna(sockfd)

pygame.init()
window = pygame.display.set_mode((1920, 1080), pygame.RESIZABLE)
font = pygame.font.SysFont("arial", 16)
clients = []

while True:
    pygame.Surface.fill(window, 0)
    handle_event(pygame.event.get())
    draw_map(window, width, height)
    loop()
    draw_interface(window, font, teams_name, width, height)
    draw_client_interface(window, font, clients)
    pygame.display.flip()
